u_max = 10;
K     = 10;
K_s   = 10;
k_d   = 1/10;
k_e   = 1/10;
k_h   = 1/10;

fun = @(t, y)[...
  u_max*(1-y(1)/K)*(y(3)/(K_s+y(3)))*y(1)-k_d*y(1)-k_e*y(1);...
  k_d*y(1)-k_h*y(2);...
  k_e*y(1)+k_h*y(2)-u_max*(1-y(1)/K)*(y(3)/(K_s+y(3)))*y(1)];
  
jacobian = @(t, y)[...
  u_max*(y(3)/(K_s+y(3)))*(1-(2/K)*y(1))-k_d-k_e,...
  0,...
  u_max*(1-y(1)/K)*y(1)*(K_s/(K_s+y(3))^2);...
  
  k_d,...
  -k_h,...
  0;...
  
  k_e-u_max*(y(3)/(K_s+y(3)))*(1-(2/K)*y(1)),...
  k_h,...
  -u_max*(1-y(1)/K)*y(1)*(K_s/(K_s+y(3))^2)];
  
initialValues = [1; 100; 0];
range = [0 100];

# Just to make sure the signs are fine.
tolerance = 1e-9; 
[t, y] = ode45(fun, range, initialValues, 'AbsTol', tolerance);

finalValues = y( size(y)(1), :)' # [9.7748; 9.7795; 81.4457]
stable_point_matrix = jacobian(100, finalValues)
eigenvalues = eig(stable_point_matrix) # [-8.7079e+00; -2.6036e-18; -1.0003e-01]
# Finally, finalValues is stable.